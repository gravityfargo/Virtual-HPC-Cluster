---
- name: Prepare the base OS
  hosts: "{{ target_hostname }}"
  vars:
    admin_user: "{{ admin_user }}"
  tasks:
    ############################################################
    - name: Setup Packages
      become: true
      block:

        - name: Update and upgrade all packages
          ansible.builtin.apt:
            update_cache: yes
            upgrade: dist
            cache_valid_time: 3600 # Cache valid for 1 hour

        - name: Remove unwanted packages
          ansible.builtin.apt:
            name: "{{ item }}"
            state: absent
          loop:
            - plymouth
            - snapd

        - name: Prevent snapd from being installed
          ansible.builtin.shell: apt-mark hold snapd

        - name: Install common packages
          ansible.builtin.apt:
            name: "{{ item }}"
            state: present
          loop:
            - net-tools
            - zsh
            - nfs-common
            - nmap
            - auditd
            - whois
            - prometheus-node-exporter
            - lua5.3 # start of lmod dependencies
            - lua-bit32:amd64
            - lua-posix:amd64
            - lua-posix-dev
            - liblua5.3-0:amd64
            - liblua5.3-dev:amd64
            - tcl
            - tcl-dev
            - tcl8.6
            - tcl8.6-dev:amd64
            - libtcl8.6:amd64
            - gfortran # start of spack dependencies 
            - gnupg2
            - python3-pip 
            - libpmix2

    ############################################################
    - name: Services
      become: true
      block:

        - name: Set timezone and enable NTP
          ansible.builtin.timezone:
            name: America/New_York

        - name: Disable or enable services
          ansible.builtin.systemd:
            name: "{{ item.name }}"
            enabled: "{{ item.enabled }}"
            state: "{{ item.state }}"
          loop:
            - { name: 'systemd-timesyncd', enabled: yes, state: started }
            - { name: 'prometheus-node-exporter', enabled: yes, state: started }
            - { name: 'auditd', enabled: yes, state: started }
            - { name: 'motd-news', enabled: no, state: stopped }

    ############################################################
    - name: Firewall
      become: true
      block:

        - name: Configure UFW rules
          ansible.builtin.ufw:
            rule: allow
            port: "{{ item.port }}"
            proto: "{{ item.proto }}"
            comment: "{{ item.comment }}"
          loop:
            - { port: '9100', proto: 'tcp', comment: 'prometheus-node-exporter' }
            - { port: '22', proto: 'tcp', comment: 'SSH' }
            - { port: '2049', proto: 'tcp', comment: 'NFS' }
  
        - name: Enable UFW
          ansible.builtin.ufw:
            state: enabled

    ############################################################
    - name: Networking
      become: true
      block:

        - name: Copy /etc/hosts from local to remote
          ansible.builtin.copy:
            src: /etc/hosts
            dest: /etc/hosts
            owner: root
            group: root
            mode: '0644'
          become: true

    ############################################################
    - name: SSH Settings
      become: true
      block:

        - name: Disable mail in PAM
          ansible.builtin.lineinfile:
            path: /etc/pam.d/sshd
            regexp: '^(session[ \t]+optional[ \t]+pam_mail.so.*)$'
            line: '#\1'
            backrefs: yes

        - name: Disable PrintLastLog in sshd_config
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "^#?PrintLastLog yes"
            line: "PrintLastLog no"

        - name: Disable Challenge-Response Authentication
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^#?ChallengeResponseAuthentication yes'
            line: 'ChallengeResponseAuthentication no'
          become: true

        - name: Disable Password Authentication
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^#?PasswordAuthentication yes'
            line: 'PasswordAuthentication no'
          become: true

        - name: Disable Root Login
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^#?PermitRootLogin prohibit-password'
            line: 'PermitRootLogin no'
          become: true

    ############################################################
    - name: MOTD
      become: true
      block:
        - name: Check if MOTD file exists
          ansible.builtin.stat:
            path: /etc/motd
          register: motd_file

        - name: Make all files in /etc/update-motd.d non-executable if MOTD doesn't exist
          ansible.builtin.shell: chmod -x /etc/update-motd.d/*
          when: not motd_file.stat.exists
          args:
            warn: false # Add this line to disable the warning about using 'shell' instead of 'command'

        - name: Download MOTD file if it doesn't exist
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/gravityfargo/Virtual-HPC-Cluster/main/assets/motd
            dest: /etc/motd
          when: not motd_file.stat.exists

    ############################################################
    - name: User Customizations
      become: false
      block:
        - name: Check if Zsh is the default shell
          ansible.builtin.shell: echo $SHELL
          register: current_shell
          changed_when: false

        - name: Change the admin's default shell to Zsh
          become: true
          ansible.builtin.shell: chsh -s $(which zsh) {{ admin_user }}
          when: '"zsh" not in current_shell.stdout'

        - name: Check if Oh My Zsh is installed
          ansible.builtin.stat:
            path: "/home/{{ admin_user }}/.oh-my-zsh"
          register: ohmyzsh_installed

        - name: Download Oh My Zsh install script
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
            dest: "/tmp/install_oh_my_zsh.sh"
            mode: "0755"
          when: not ohmyzsh_installed.stat.exists

        - name: Install Oh My Zsh
          ansible.builtin.shell: sh /tmp/install_oh_my_zsh.sh --unattended
          args:
            creates: "/home/{{ admin_user }}/.oh-my-zsh"
          when: not ohmyzsh_installed.stat.exists

        - name: Install Zsh plugins
          ansible.builtin.git:
            repo: "{{ item.repo }}"
            dest: "/home/{{ admin_user }}{{ item.dest }}"
          loop:
            - {
                repo: "https://github.com/zsh-users/zsh-autosuggestions",
                dest: "/.oh-my-zsh/custom/plugins/zsh-autosuggestions",
              }
            - {
                repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git",
                dest: "/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting",
              }
          when: not ohmyzsh_installed.stat.exists

        - name: Update Zsh configuration
          ansible.builtin.shell: "{{ item.cmd }}"
          loop:
            - { cmd: "sed -i 's/plugins=(git)/plugins=(zsh-autosuggestions zsh-syntax-highlighting)/' /home/{{ admin_user }}/.zshrc", args: { warn: false } }
            - { cmd: "sed -i 's/ZSH_THEME=\"robbyrussell\"/ZSH_THEME=\"daveverwer\"/' /home/{{ admin_user }}/.zshrc", args: { warn: false } }
            - { cmd: "echo \"emulate sh -c 'source /etc/profile'\" | cat - /home/{{ admin_user }}/.zshrc > temp && mv temp /home/{{ admin_user }}/.zshrc", args: { warn: false } }
          when: not ohmyzsh_installed.stat.exists

    ############################################################
    - name: Mount Points and environment management 
      become: true
      block:

        - name: Create necessary directories
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - /storage/home
            - /storage/projects
            - /storage/sw
            - /storage/spack

        - name: Ensure groups exist with specific GIDs
          ansible.builtin.group:
            name: "{{ item.name }}"
            gid: "{{ item.gid }}"
            state: present
          loop:
            - { name: "slurm", gid: "1001" }
            - { name: "swmanager", gid: "1002" }
            - { name: "filemanager", gid: "1003" }

        - name: Create users without home directories
          ansible.builtin.user:
            name: "{{ item.name }}"
            comment: "{{ item.comment }}"
            uid: "{{ item.uid }}"
            group: "{{ item.group }}"
            createhome: no
            system: "{{ item.system | default(omit) }}"
          loop:
            - { name: "slurm", comment: "Slurm User", uid: "1001", group: "slurm" }
            - { name: "swmanager", comment: "Software Manager User", uid: "1002", group: "swmanager" }
            - { name: "filemanager", comment: "File Manager User", uid: "1003", group: "filemanager", system: yes }


        - name: Change ownership of /storage/sw to swmanager
          ansible.builtin.file:
            path: /storage/sw
            owner: swmanager
            group: swmanager
            state: directory

        - name: Change ownership of /storage/spack to swmanager
          ansible.builtin.file:
            path: /storage/spack
            owner: swmanager
            group: swmanager
            state: directory

        - name: Change ownership of /storage/projects to filemanager
          ansible.builtin.file:
            path: /storage/projects
            owner: filemanager
            group: filemanager
            state: directory

        - name: Change ownership of /storage/home to filemanager
          ansible.builtin.file:
            path: /storage/home
            owner: filemanager
            group: filemanager
            state: directory
