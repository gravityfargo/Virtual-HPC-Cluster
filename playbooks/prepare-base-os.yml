---
- name: Prepare the base OS
  hosts: "{{ target_hostname }}"
  vars:
    admin_user: "{{ admin_user }}"
  tasks:
    ############################################################
    - name: Setup Packages
      become: true
      block:
        - name: Update and upgrade all packages
          ansible.builtin.apt:
            update_cache: yes
            upgrade: dist
            cache_valid_time: 3600

        - name: Remove unwanted packages
          ansible.builtin.apt:
            name: "{{ item }}"
            state: absent
          loop:
            - plymouth
            - snapd

        - name: Prevent snapd from being installed
          ansible.builtin.shell: apt-mark hold snapd

        - name: Install common packages
          ansible.builtin.apt:
            name: "{{ item }}"
            state: present
          loop:
            - net-tools
            - zsh
            - nfs-common
            - nmap
            - auditd
            - whois
            - prometheus-node-exporter
            - gnupg2

    ############################################################
    - name: Services
      become: true
      block:
        - name: Set timezone and enable NTP
          ansible.builtin.timezone:
            name: America/New_York

        - name: Disable or enable services
          ansible.builtin.systemd:
            name: "{{ item.name }}"
            enabled: "{{ item.enabled }}"
            state: "{{ item.state }}"
          loop:
            - { name: "systemd-timesyncd", enabled: yes, state: started }
            - { name: "prometheus-node-exporter", enabled: yes, state: started }
            - { name: "auditd", enabled: yes, state: started }
            - { name: "motd-news", enabled: no, state: stopped }

    ############################################################
    - name: Firewall
      become: true
      block:
        - name: Configure UFW rules
          ansible.builtin.ufw:
            rule: allow
            port: "{{ item.port }}"
            proto: "{{ item.proto }}"
            comment: "{{ item.comment }}"
          loop:
            - {
                port: "9100",
                proto: "tcp",
                comment: "prometheus-node-exporter",
              }
            - { port: "22", proto: "tcp", comment: "SSH" }
            - { port: "2049", proto: "tcp", comment: "NFS" }

        - name: Enable UFW
          ansible.builtin.ufw:
            state: enabled

    ############################################################
    - name: Networking
      become: true
      block:
        - name: Copy /etc/hosts from local to remote
          ansible.builtin.copy:
            src: /etc/hosts
            dest: /etc/hosts
            owner: root
            group: root
            mode: "0644"
            
        - name: Copy variables from local to remote
          ansible.builtin.copy:
            src: /.variables.sh
            dest: /.variables.sh
            owner: "{{ admin_user }}"
            group: "{{ admin_user }}"
            mode: "0600"

    ############################################################
    - name: SSH Settings
      become: true
      block:
        - name: Disable mail in PAM
          ansible.builtin.lineinfile:
            path: /etc/pam.d/sshd
            regexp: '^(session[ \t]+optional[ \t]+pam_mail.so.*)$'
            line: '#\1'
            backrefs: yes

        - name: Disable PrintLastLog in sshd_config
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "^#?PrintLastLog yes"
            line: "PrintLastLog no"

        - name: Disable Challenge-Response Authentication
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "^#?ChallengeResponseAuthentication yes"
            line: "ChallengeResponseAuthentication no"
          become: true

        - name: Disable Password Authentication
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "^#?PasswordAuthentication yes"
            line: "PasswordAuthentication no"
          become: true

        - name: Disable Root Login
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "^#?PermitRootLogin prohibit-password"
            line: "PermitRootLogin no"
          become: true

    ############################################################
    - name: MOTD
      become: true
      block:
        - name: Check if MOTD file exists
          ansible.builtin.stat:
            path: /etc/motd
          register: motd_file

        - name: Make all files in /etc/update-motd.d non-executable if MOTD doesn't exist
          ansible.builtin.shell: chmod -x /etc/update-motd.d/*
          when: not motd_file.stat.exists

        - name: Download MOTD file if it doesn't exist
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/gravityfargo/Virtual-HPC-Cluster/main/assets/motd
            dest: /etc/motd
          when: not motd_file.stat.exists

    ############################################################
    - name: User Customizations
      become: false
      block:
        - name: Check if Zsh is the default shell
          ansible.builtin.shell: echo $SHELL
          register: current_shell
          changed_when: false

        - name: Change the admin's default shell to Zsh
          become: true
          ansible.builtin.shell: chsh -s $(which zsh) {{ admin_user }}
          when: '"zsh" not in current_shell.stdout'

        - name: Check if Oh My Zsh is installed
          ansible.builtin.stat:
            path: "/home/{{ admin_user }}/.oh-my-zsh"
          register: ohmyzsh_installed

        - name: Download Oh My Zsh install script
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
            dest: "/tmp/install_oh_my_zsh.sh"
            mode: "0755"
          when: not ohmyzsh_installed.stat.exists

        - name: Install Oh My Zsh
          ansible.builtin.shell: sh /tmp/install_oh_my_zsh.sh --unattended
          args:
            creates: "/home/{{ admin_user }}/.oh-my-zsh"
          when: not ohmyzsh_installed.stat.exists

        - name: Install Zsh plugins
          ansible.builtin.git:
            repo: "{{ item.repo }}"
            dest: "/home/{{ admin_user }}{{ item.dest }}"
          loop:
            - {
                repo: "https://github.com/zsh-users/zsh-autosuggestions",
                dest: "/.oh-my-zsh/custom/plugins/zsh-autosuggestions",
              }
            - {
                repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git",
                dest: "/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting",
              }
          when: not ohmyzsh_installed.stat.exists

        - name: Update Zsh configuration
          ansible.builtin.shell: "{{ item }}"
          loop:
            - sed -i 's/plugins=(git)/plugins=(zsh-autosuggestions zsh-syntax-highlighting)/' /home/{{ admin_user }}/.zshrc
            - sed -i ''s/ZSH_THEME="robbyrussell"/ZSH_THEME="daveverwer"/'' /home/{{ admin_user }}/.zshrc
            - echo "emulate sh -c 'source /etc/profile'" | cat - /home/{{ admin_user }}/.zshrc > temp && mv temp /home/{{ admin_user }}/.zshrc
            - echo "source /.variables.sh" >> /home/{{ admin_user }}/.bashrc && echo "source /.variables.sh" >> /home/{{ admin_user }}/.zshrc
          when: not ohmyzsh_installed.stat.exists
